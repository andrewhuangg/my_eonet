{"version":3,"sources":["components/LocationMarker.js","components/EventInfoBox.js","components/Map.js","spinner.gif","components/Loader.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["LocationMarker","lat","lng","icon","onClick","id","drought","dustHaze","earthquake","flood","landslide","manmade","sealakeice","severeStorm","snow","extremeTemperature","volcano","waterColor","fireAlert","defaultNature","className","EventInfoBox","info","title","description","link","Map","eventData","center","zoom","useState","locationEventInfo","setLocationEventInfo","markers","map","event","geoSize","geometries","length","categoryId","categories","geoLoc","type","coordinates","flat","poly","innerPolyArr","coords","bootstrapURLKeys","key","process","defaultCenter","defaultZoom","defaultProps","Loader","src","spinner","alt","Header","feather","App","setEventData","loading","setLoading","useEffect","a","axios","get","res","data","events","fetchEvent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3555f87.chunk.js","sourcesContent":["import React from 'react';\nimport { Icon } from '@iconify/react';\nimport fireAlert from '@iconify/icons-mdi/fire-alert';\nimport drought from '@iconify/icons-mdi/barley-off';\nimport dustHaze from '@iconify/icons-mdi/hexagon-multiple-outline';\nimport defaultNature from '@iconify/icons-mdi/nature';\nimport earthquake from '@iconify/icons-mdi/resistor';\nimport flood from '@iconify/icons-mdi/waves';\nimport landslide from '@iconify/icons-mdi/traffic-cone';\nimport manmade from '@iconify/icons-mdi/alert-outline';\nimport sealakeice from '@iconify/icons-mdi/snowflake-melt';\nimport severeStorm from '@iconify/icons-mdi/weather-lightning-rainy';\nimport snow from '@iconify/icons-mdi/weather-snowy-heavy';\nimport extremeTemperature from '@iconify/icons-mdi/thermometer-high';\nimport volcano from '@iconify/icons-mdi/image-filter-hdr';\nimport waterColor from '@iconify/icons-mdi/format-color-fill';\n\nconst LocationMarker = ({ lat, lng, onClick, id }) => {\n  let icon;\n  switch (id) {\n    case 6:\n      icon = drought;\n      break;\n    case 7:\n      icon = dustHaze;\n      break;\n    case 16:\n      icon = earthquake;\n      break;\n    case 9:\n      icon = flood;\n      break;\n    case 14:\n      icon = landslide;\n      break;\n    case 19:\n      icon = manmade;\n      break;\n    case 15:\n      icon = sealakeice;\n      break;\n    case 10:\n      icon = severeStorm;\n      break;\n    case 17:\n      icon = snow;\n      break;\n    case 18:\n      icon = extremeTemperature;\n      break;\n    case 12:\n      icon = volcano;\n      break;\n    case 13:\n      icon = waterColor;\n      break;\n    case 8:\n      icon = fireAlert;\n      break;\n    default:\n      icon = defaultNature;\n      break;\n  }\n\n  return (\n    <>\n      <div className='locationMarker' onClick={onClick}>\n        <Icon icon={icon} className={`locationMarker__icon locationMarker__icon-${id}`} />\n      </div>\n    </>\n  );\n};\n\nexport default LocationMarker;\n","import React from 'react';\n\nconst EventInfoBox = ({ info }) => {\n  return (\n    <div className='eventInfoBox'>\n      <h2>Event Location Info</h2>\n      <ul>\n        <li>ID: {info.id}</li>\n        <li>Title: {info.title}</li>\n        {info.description && <li>Description: {info.description}</li>}\n        <li>Link: {info.link}</li>\n      </ul>\n    </div>\n  );\n};\n\nexport default EventInfoBox;\n","import React, { useState } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport LocationMarker from './LocationMarker';\nimport EventInfoBox from './EventInfoBox';\n\nconst Map = ({ eventData, center, zoom }) => {\n  const googleapi = process.env.REACT_APP_GOOGLE_MAP_API_KEY;\n\n  const [locationEventInfo, setLocationEventInfo] = useState(null);\n\n  const markers = eventData.map((event) => {\n    const geoSize = event.geometries.length;\n    const categoryId = event.categories[0].id;\n    // incase geometries type is a polygon, we need to flatten the coordinates\n\n    if (geoSize > 1) {\n      const geoArray = event.geometries;\n      return geoArray.map((geoLoc) => {\n        if (geoLoc.type === 'Polygon') {\n          const coordArray = geoLoc.coordinates;\n          const flatPolygon = coordArray.flat(1);\n          return flatPolygon.map((poly) => {\n            <>\n              <LocationMarker\n                id={categoryId}\n                lat={poly[1]}\n                lng={poly[0]}\n                onClick={() =>\n                  setLocationEventInfo({\n                    id: event.id,\n                    title: event.title,\n                    description: event.description,\n                    link: event.link,\n                  })\n                }\n              />\n            </>;\n          });\n        }\n        <>\n          <LocationMarker\n            id={categoryId}\n            lat={geoLoc.coordinates[1]}\n            lng={geoLoc.coordinates[0]}\n            onClick={() =>\n              setLocationEventInfo({\n                id: event.id,\n                title: event.title,\n                description: event.description,\n                link: event.link,\n              })\n            }\n          />\n        </>;\n      });\n    } else {\n      if (event.geometries[0].type === 'Polygon') {\n        const coordArray = event.geometries[0].coordinates;\n        const flatPolygon = coordArray.flat(1);\n        return flatPolygon.map((innerPolyArr) => {\n          return innerPolyArr.map((coords) => {\n            <>\n              <LocationMarker\n                id={categoryId}\n                lat={coords[1]}\n                lng={coords[0]}\n                onClick={() =>\n                  setLocationEventInfo({\n                    id: event.id,\n                    title: event.title,\n                    description: event.description,\n                    link: event.link,\n                  })\n                }\n              />\n            </>;\n          });\n        });\n      } else {\n        return (\n          <LocationMarker\n            id={categoryId}\n            lat={event.geometries[0].coordinates[1]}\n            lng={event.geometries[0].coordinates[0]}\n            onClick={() =>\n              setLocationEventInfo({\n                id: event.id,\n                title: event.title,\n                description: event.description,\n                link: event.link,\n              })\n            }\n          />\n        );\n      }\n    }\n  });\n\n  return (\n    <div className='googleMap'>\n      <GoogleMapReact\n        bootstrapURLKeys={{ key: googleapi }}\n        defaultCenter={center}\n        defaultZoom={zoom}\n      >\n        {markers}\n      </GoogleMapReact>\n      {locationEventInfo && <EventInfoBox info={locationEventInfo} />}\n    </div>\n  );\n};\n\nMap.defaultProps = {\n  center: {\n    lat: 37.773972,\n    lng: -122.431297,\n  },\n  zoom: 5,\n};\n\nexport default Map;\n","export default __webpack_public_path__ + \"static/media/spinner.d8baec16.gif\";","import React from 'react';\nimport spinner from '../spinner.gif';\n\nconst Loader = () => {\n  return (\n    <div className='loader'>\n      <img src={spinner} alt='loading' />\n    </div>\n  );\n};\n\nexport default Loader;\n","import React from 'react';\nimport { Icon } from '@iconify/react';\nimport feather from '@iconify/icons-mdi/feather';\n\nconst Header = () => {\n  return (\n    <>\n      <header className='header'>\n        <h1>\n          <Icon icon={feather} className='header__icon' /> Earth Observatory Natural Event Tracker\n          (NASA EONET)\n        </h1>\n      </header>\n    </>\n  );\n};\n\nexport default Header;\n","import { useState, useEffect } from 'react';\nimport './assets/style.scss';\nimport axios from 'axios';\nimport Map from './components/Map';\nimport Loader from './components/Loader';\nimport Header from './components/Header';\n\nconst App = () => {\n  const [eventData, setEventData] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchEvent = async () => {\n      setLoading(true);\n\n      const res = await axios.get('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events');\n      const { events } = await res.data;\n\n      setEventData(events);\n      setLoading(false);\n    };\n\n    fetchEvent();\n  }, []);\n\n  return (\n    <div>\n      <Header />\n      {!loading ? <Map eventData={eventData} /> : <Loader />}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}